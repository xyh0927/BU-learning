import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import r2_score
from sklearn.linear_model import LinearRegression

data = pd.read_csv("./PINS_Y1.csv")

print("Q1")
df_0_1 = data[['numWeek', 'P/L']]
df0_1 = df_0_1[(df_0_1['numWeek'] >= 5) & (df_0_1['numWeek'] <= 30)]
df0_1.plot.scatter(x='numWeek', y='P/L')
plt.savefig("lg_plt.pdf")
print("W* = 18")
print("############################################################################################")

print("Q2")

x = np.array([22.44, 21.83, 22.18, 22.62, 22.2, 22.03, 22.35])
# use to calculate the inear regression
y0 = np.array([26.34, 25.49, 26.450001, 26.67, 25.690001, 24.610001, 24.809999])

x_2 = x_2 = x[:, np.newaxis]
lin_reg = LinearRegression(fit_intercept=True)
lin_reg.fit(x_2, y0)

print("lin_reg.score", lin_reg.score(x_2, y0))
print("lin_reg.coef_", lin_reg.coef_)
print("lin_reg.intercept_", lin_reg.intercept_)

print("------------------------------------------------------------------------")
# use to calculate r2 for year2

y = np.array([17.25,
              19.200001,
              19.299999,
              19.48,
              19.99,
              22.309999,
              22.440001
              ])
degree = 18
weights = np.polyfit(x, y, degree)
model = np.poly1d(weights)
predicted = model(x)
r2 = r2_score(y, predicted)
print(r2)

print("############################################################################################")

p1 = 0.0
p2 = 0.0

list3 = [None] * 100

x = 0
for i in range(100):
    x += 0.001
    list3[i] = round(x, 4)

p_long = 0.0
p_short = 0.0
money = 100
stock_num = 0.0
count = 0
count_long = 0
count_short = 0

list1 = [49.619999, 50, 50.360001, 51.810001, 51.639999, 50.93, 51.41, 51.57, 52.52, 52.669998, 53.59, 55.580002, 62.68,
         61.349998, 58.060001, 50.68,
         47.889999, 45.360001, 45.610001, 44.639999, 45.259998, 44.349998, 44.68, 43.639999, 46.220001, 46.560001,
         46.639999, 45.860001, 45.009998,
         45.959999, 47.939999, 48.790001, 47.470001, 46, 44.759998, 43.07, 41.77, 42.34, 42.799999, 40.540001,
         40.060001, 37.290001, 37.580002, 35.84,
         37.82, 38.68, 40.52, 38.75, 37.259998, 36.040001, 35.619999, 36.049999, 34.93, 36.509998, 35.759998, 36.740002,
         37.259998, 37.419998, 36.93,
         36.52, 35.950001, 37.950001, 36.349998, 36.41, 33.130001, 32.84, 32.689999, 32.419998, 32.700001, 34, 34.43,
         32.970001, 32.830002, 31.690001,
         31.639999, 31.950001, 29.450001, 31.110001, 28.459999, 26.74, 26.879999, 26.84, 29.559999, 30.01, 27.33, 24.51,
         27.25, 26.459999, 26.68, 26.799999,
         25.549999, 25.4, 24.709999, 25.879999, 25.73, 24.690001, 23.860001, 23.92, 23.389999, 25.34, 26.35, 26.75,
         26.41, 26.030001, 24.93, 24.18, 23.09,
         23.059999, 25.26, 23.92, 23.08, 22.370001, 22.74, 24.309999, 24.889999, 26.32, 25.540001, 26.450001, 25.66,
         26.34, 25.49, 26.450001, 26.67, 25.690001,
         24.610001, 24.809999, 27.4, 26.129999, 24.440001, 23.57, 23.549999, 23.25, 22.68, 22.950001, 22.16, 21.83,
         22.719999, 21.040001, 20.23, 19.59, 20, 19.219999,
         18.67, 21.200001, 20.52, 22.16, 22.389999, 24.200001, 22.629999, 22.690001, 21.08, 20.219999, 18.889999, 20.16,
         21.469999, 21.49, 22.48, 22.09, 23.139999,
         22.91, 22.59, 17.25, 18.9, 19.540001, 20.450001, 19.65, 18.93, 20.040001, 19.459999, 19.940001, 19.969999,
         20.790001, 20.25, 19.24, 17.219999, 17.190001, 19.07,
         17.450001, 18.18, 18.42, 18.889999, 19.9, 21.469999, 20.73, 19.700001, 19.959999, 18.16, 18.709999, 20.23,
         19.73, 20.27, 20.24, 18.51, 18.5, 18.41, 17.559999,
         20.4, 20.25, 20.639999, 21.27, 20.940001, 18.110001, 18.059999, 17.25, 19.200001, 19.299999, 19.48, 19.99,
         22.309999, 22.440001, 22.530001, 22.549999, 22.9,
         22.540001, 22.9, 22.860001, 23.43, 23.379999, 22.99, 22.49, 22.559999, 21.77, 21.24, 20.57, 21.040001, 24.01,
         23.08, 22.91, 21.959999, 23.040001, 22.74, 22.07,
         22.1, 23.469999, 24, 25.549999, 25.700001, 24.59, 24.76, 25.629999, 24.92, 25.42, 24.76, 23.91, 23.209999,
         22.59, 22.809999]
list2 = [49.990002, 49.150002, 51.209999, 52.040001, 51.349998, 51.049999, 51.799999, 51.77, 52.959999, 51.66, 54,
         56.09, 61.91, 59.970001, 49.639999, 51, 47.5,
         45.439999, 45.5, 44.5, 45.5, 44.169998, 44.790001, 44.16, 46.18, 47.009998, 46.040001, 46.169998, 45.450001,
         46.5, 47.880001, 48.400002, 47.549999,
         45.939999, 44.599998, 42.57, 41.380001, 41.849998, 42.869999, 40.779999, 40.049999, 36.290001, 37.43,
         35.040001, 38.514, 39, 40.259998, 39.32, 36.990002,
         35.349998, 35.32, 36.470001, 34.950001, 35.650002, 36.029999, 36.535, 37.029999, 37.02, 36.610001, 36.209999,
         36, 37.400002, 36.799999, 35.169998,
         33.509998, 32.549999, 32.650002, 31.700001, 33, 34.27, 34.43, 32.75, 32.285, 31.790001, 32.349998, 31.459999,
         28.549999, 29.860001, 29.07, 27.34, 27.16,
         27.120001, 29.610001, 30.110001, 24.357, 25.280001, 27.02, 25.98, 27.309999, 26.25, 25.77, 25.299999, 25.16,
         25.219999, 25.51, 24.719999, 23.48, 23.92,
         22.5, 25.5, 26.290001, 26.610001, 26.5, 26.02, 25.07, 24.17, 22.76, 23.559999, 24.5, 24.4, 22.690001,
         22.120001, 23.360001, 23.77, 24.709999, 26.129999,
         25.639999, 25.92, 25.91, 26.450001, 25.530001, 25.870001, 26.48, 25.85, 24.73, 25.5, 27.4, 25.559999,
         24.299999, 23.389999, 23.139999, 23.705, 22.65,
         23.32, 22.129999, 21.620001, 22.370001, 21.15, 19.91, 19.469999, 19.860001, 18.870001, 20.200001, 21.280001,
         20.559999, 22.040001, 22.200001, 23.52,
         22.469999, 22.15, 21.59, 20.09, 18.49, 20.27, 21.1, 21.860001, 21.93, 22.299999, 23.4, 22.780001, 18.690001,
         17.49, 18.610001, 19.67, 20.27, 19.719999,
         18.610001, 19.610001, 19.719999, 19.67, 20.16, 20.799999, 19.799999, 18.549999, 17.110001, 17.23, 18.219999,
         17.43, 18.32, 18.16, 19.08, 20.27, 21.9, 20.6,
         20.299999, 19.620001, 18.15, 18.17, 20.15, 19.67, 19.85, 19.82, 18.719999, 17.98, 18.25, 19.93, 20.719999,
         20.42, 21, 20.98, 19.290001, 18.17, 17.530001,
         18.200001, 18.73, 19, 19.139999, 23.620001, 22.200001, 22.57, 22.41, 22.780001, 22.549999, 23.450001, 23.18,
         23.290001, 23.209999, 23.139999, 22.605,
         22.360001, 22, 21.200001, 21.110001, 20.57, 21.370001, 23.809999, 22.67, 23.219999, 23.530001, 22.799999,
         22.959999, 21.940001, 23.290001, 23, 24.75,
         25.450001, 24.389999, 24.5, 24.389999, 25, 24.780001, 25.17, 25.02, 23.879999, 22.99, 22.639999, 23.24]

for i in range(len(list1) - 1):
    if (list2[i] > list1[i]):
        stock_num = round(money / list2[i], 2)
        a = money
        money = 0.0
        money = stock_num * list1[i + 1]

        count_long += 1
        count += 1

        p1 = money - a
        p_long += p1

    elif (list2[i] < list1[i]):
        stock_num = round(money / list1[i], 2)
        b = money
        money = 0.0
        money = stock_num * list2[i]

        count_short += 1
        count += 1

        p2 = money - b
        p_short += p2

    else:
        continue

print("Q3:")
print("The number of long-position trsaction: ", count_long)

print("The number of short-position trsaction: ", count_short)
print("---------------------------------------------------------------------------------------")

print("Because the second year is a big drop compared to the first year," +
      "it is impossible to hold for a long time. \n" +
      "Therefore, the strategies we can take are simple, all short-term actions." +
      "Buy when it falls compared to the previous day,\n" +
      "and sell when it rises compared to the previous day," +
      "so as to maximize the benefits.")

print("############################################################################################")

print("Q4:")
print("The average Profit/Loss per long-position is ", round(p_long / count_long, 3))
print("The average Profit/Loss per short-position is ", round(p_short / count_short, 3))

print("############################################################################################")

print("Q5:")
print("The average number of days in a week for long-position is: ", round(count_long / 26, 0))
print("The average number of days in a week for short-position is: ", round(count_short / 26, 0))
